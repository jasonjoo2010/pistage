// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	orch "github.com/projecteru2/aa/orch"
	mock "github.com/stretchr/testify/mock"
)

// Orchestrator is an autogenerated mock type for the Orchestrator type
type Orchestrator struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *Orchestrator) Execute(_a0 context.Context, _a1 orch.ExecuteOptions) (<-chan orch.Message, error) {
	ret := _m.Called(_a0, _a1)

	var r0 <-chan orch.Message
	if rf, ok := ret.Get(0).(func(context.Context, orch.ExecuteOptions) <-chan orch.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan orch.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, orch.ExecuteOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadID provides a mock function with given fields: ctx, app, entry, labels
func (_m *Orchestrator) GetWorkloadID(ctx context.Context, app string, entry string, labels []string) (string, error) {
	ret := _m.Called(ctx, app, entry, labels)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) string); ok {
		r0 = rf(ctx, app, entry, labels)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, app, entry, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lambda provides a mock function with given fields: _a0, _a1
func (_m *Orchestrator) Lambda(_a0 context.Context, _a1 orch.LambdaOptions) (<-chan orch.Message, error) {
	ret := _m.Called(_a0, _a1)

	var r0 <-chan orch.Message
	if rf, ok := ret.Get(0).(func(context.Context, orch.LambdaOptions) <-chan orch.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan orch.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, orch.LambdaOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
